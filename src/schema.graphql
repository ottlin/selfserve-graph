enum EventStatus{
  LIVE
  PAST
  STAGING
  ARCHIVED
  DELETED
}

enum UserRole{
  MEETING_MANAGER
  JUNIOR_MEETING_MANAGER
  INTERNAL_ATTENDEE
  EXTERNAL_ATTENDEE
  EXECUTIVE_ADMIN
  REQUESTOR
  PARTNER
  ANYONE
}

type EventTemplate {
  id: ID!,
  name: String!,
  meetings: String!,
  engagementTemplate: [EngagementTemplate] @relation(name: "HAS", direction: "IN")
}

type EngagementTemplate{
  id: ID!,
  name: String!,
  meetingMinDuration: Int!,
  meetingMaxDuration: Int!,
  locationOffSites: Boolean!,
  locationBoothTours: Boolean!,
  attendeeOptionInternalAttendeeOption: Boolean!,
  attendeeOptionHideInternalAttendeeSection: Boolean!,
  attendeeOptionAtLeastOneInternalAttendeeIsRequired: Boolean!,
  attendeeOptionAllowMeetingRequestorsToAddNewInternalAttendees: Boolean!,
  attendeeOptionAtLeastOneUserOfAttendeeRoleIsRequired: Boolean!,
  attachDocumentsAllowViewingOfAttachmentsOnMobile: Boolean!
  attachDocumentsAttachDocumentsByUploadingFiles: Boolean!,
  PostMeetingInternalSurveyRequestorsOfTheseRolesCanFillSurvey: [UserRole!],
  PostMeetingInternalSurveyParticipantsOfTheseRolesCanFillSurvey: [UserRole!],
  externalWidget: Boolean!,
  mappings: Boolean!,
  showInstructions: String!
}

type Engagement{
  id: ID!,
  name: String!,
  meetingMinDuration: Int,
  meetingMaxDuration: Int,
  locationOffSites: Boolean,
  locationBoothTours: Boolean,
  attendeeOptionInternalAttendeeOption: Boolean,
  attendeeOptionHideInternalAttendeeSection: Boolean,
  attendeeOptionAtLeastOneInternalAttendeeIsRequired: Boolean,
  attendeeOptionAllowMeetingRequestorsToAddNewInternalAttendees: Boolean,
  attendeeOptionAtLeastOneUserOfAttendeeRoleIsRequired: Boolean,
  attachDocumentsAllowViewingOfAttachmentsOnMobile: Boolean,
  attachDocumentsAttachDocumentsByUploadingFiles: Boolean,
  PostMeetingInternalSurveyRequestorsOfTheseRolesCanFillSurvey: [UserRole],
  PostMeetingInternalSurveyParticipantsOfTheseRolesCanFillSurvey: [UserRole],
  externalWidget: Boolean,
  mappings: Boolean,
  showInstructions: String,
  active: Boolean,
  type: String!,
  createdAt: DateTime!,
  createdBy: String!,
  canBeRequestedBy: [UserRole!]
}

type EventUsersSetting {
  endorsments: Boolean!,
  doubleBooking: Boolean!,
  pushNotification: Boolean!,
  sendEmailOnMap: Boolean!
}

type Survey{
  id: ID!
  name: String!,
  whenToCollect: String!,
  surveyFor: [Engagement] @relation(name: "HAS", direction: "IN")
}

type OtherSetting{
  quickMeeting: Boolean!,
  mappingModule: Boolean!,
  locations: Boolean!,
  changeMeetingType: Boolean!,
  enableEmailNotification: Boolean!,
  enableICSNotification: Boolean!,
  enablePushNotification: Boolean!
  autoRemainder: Boolean!
}

type Topic {
  id: ID!,
  name: String!,
  description: String,
  # TODO: Relation to User
  # TODO: Relation to Location
  # TODO: Relation to Engagement Types 
}

type Track {
  id: ID!,
  name: String!,
  description: String,
  # TODO: Relation to Topic
  # TODO: Relation to Engagement Types 
}

type Location {
  id: ID!,
  name: String!,
  type: String!,
  address: String!,
  capacity: Int!,
  contactNumber: String!,
  accessibleBy: [UserRole],
  description: String
# TODO: Relation to Engagement Types 
# TODO: Relation to Topics 
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  password: String!
  emailID: String!
  eventRole: UserRole!
  jobTitle: String
  secondaryEmailID: String
  phoneNumber: String
  bio: String
# TODO: Relation to Enagagement Type
# TODO: Relation to Topic
# TODO: Relation to Event 
}

type Event {
  id: ID!
  name: String!
  status: EventStatus!
  city: String!
  timezone: String!
  startDate: DateTime!
  endDate: DateTime!
  supportEmail: String!
  banner: String!
  engagement: [Engagement] @relation(name: "HAS", direction: "IN")
  location: [Location] @relation(name: "HAS", direction: "IN")
  user: [User] @relation(name: "HAS", direction: "IN")
  userSettings: EventUsersSetting 
  topic: [Topic] @relation(name: "HAS", direction: "IN")
  track: [Track] @relation(name: "HAS", direction: "IN")
  survey: [Survey] @relation(name: "HAS", direction: "IN")
# TODO: Relation to Roles and Privileges 
  otherSetting: OtherSetting
}

type UserWithToken {
	token: String!,
	user: User!
}

type Mutation {
	login(emailID:String!, password:String!): UserWithToken!
	register(emailID:String!, password:String!): String
	resetPassword(emailID:String!, password:String!, old: String!): String
}
